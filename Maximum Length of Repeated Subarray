Maximum Length of Repeated Subarray


class Solution {
    
//     int helper(int[] nums1, int[] nums2, int m, int n , int ans){
//         if(m == 0 || n==0) return 0;
        
//         if(nums1[m-1] == nums2[n-1]){
//             ans = 1 + helper(nums1, nums2, m-1, n-1, ans);
//             return Math.max(ans, );
//         }else{
//             return 0;
//         }
//     }
    
    public int findLength(int[] nums1, int[] nums2) {
        
        int m = nums1.length;
        int n = nums2.length;
        
        int max = 0;
        int dp[][] = new int[m+1][n+1];
        
        for(int i = 1 ; i<=m ; i++){
            for(int j = 1 ; j<=n ; j++){
                if(nums1[i-1] == nums2[j-1]){
                    dp[i][j] = 1 + dp[i-1][j-1];
                    max = Math.max(max, dp[i][j]);
                }
                else dp[i][j] = 0;
            }
        }
        
        return max;
    }
}
