1814. Count Nice Pairs in an Array

//using mergesort as it appear
class Solution {

    int sub_rev(int n){
        int rev = 0;
        int k = n;
        // int ld = 0;
        while(k>0){
            int ld = k%10;
            rev = rev * 10 + ld;
            k = k / 10;
        }

        return n-rev;
    }

    int mod = 1000000007;

    public int countNicePairs(int[] nums) {
        for(int i = 0; i<nums.length; i++){
            nums[i] = sub_rev(nums[i]);
        }

        System.out.println(Arrays.toString(nums));

        return (int)mergeSort(0, nums.length - 1, nums, new int[nums.length]);
    }

    long mergeSort(int start, int end, int ar[], int temp[]){
        
        if(start<end){
            int mid = (start + end)/2;
            long sol = 0;
            sol = (sol + mergeSort(start, mid, ar, temp)%mod)%mod;
            sol = (sol + mergeSort(mid+1, end, ar, temp)%mod)%mod;

            sol = (sol + merge(start, mid+1, end, ar, temp)%mod) % mod;
            return sol;
        }

        return 0;
    }

    long merge(int s, int m, int e, int ar[], int temp[]){
        long cnt = 0;
        for(int i = m; i<= e; i++){
            int ub = upperbound(ar, ar[i], s, m - 1);
            int lb = lowerbound(ar, ar[i], s, m - 1);

            if(ub>0 && ar[ub-1] == ar[i] && ar[lb] == ar[i]){
                cnt+= ub-lb;
            }
        }

        int i = s, j = m, k = s;

        while(i<m && j<=e){
            if(ar[i]<ar[j]){
                temp[k++] = ar[i++];
            }else{
                temp[k++] = ar[j++];
            }
        }
        while(i < m) {
            temp[k++] = ar[i++];
        }
        
        while(j <= e) {
            temp[k++] = ar[j++];
        }
        
        for(int pos = s; pos <= e; ++pos) {
            ar[pos] = temp[pos];
        } 

        return cnt;
    }
    public int upperbound(int[] arr, int target, int l, int r) {
        int ans = r+1;
        while(l <= r) {
            int m = (l + r)/2;
            if(arr[m] > target) {
                ans = m;
                r = m - 1;
            }else {
                l = m + 1;
            }
        }
        
        return ans;
    }
    
    public int lowerbound(int[] arr, int target, int l, int r) {
        int ans = l;
        while(l <= r) {
            int m = (l+r)/2;
            if(arr[m] < target) {
                l = m + 1;
            }else {
                ans = m;
                r = m - 1;
            }
        }
        return ans;
    }
}


//using hashmap only
    public int countNicePairs(int[] A) {
        int res = 0, mod = (int)1e9 + 7;
        Map<Integer, Integer> count = new HashMap<>();;
        for (int a : A) {
            int b = rev(a), v = count.getOrDefault(a - b, 0);
            count.put(a - b, v + 1);
            res = (res + v) % mod;
        }
        return res;
    }

    public int rev(int a) {
        int b = 0;
        while (a > 0) {
            b = b * 10 + (a % 10);
            a /= 10;
        }
        return b;
    }
