150. Evaluate Reverse Polish Notation
You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.
Evaluate the expression. Return an integer that represents the value of the expression.
Note that:
    The valid operators are '+', '-', '*', and '/'.
    Each operand may be an integer or another expression.
    The division between two integers always truncates toward zero.
    There will not be any division by zero.
    The input represents a valid arithmetic expression in a reverse polish notation.
    The answer and all the intermediate calculations can be represented in a 32-bit integer.


class Solution {
    
    boolean isInt(String ch){
        try{
          int num = Integer.parseInt(ch);
          return true;
        }catch (NumberFormatException e) {
            return false;
        }
    }
    
    public int evalRPN(String[] tokens) {
        Stack<Integer> s = new Stack<>();
        
        for(String e: tokens){
            
            if(isInt(e)){
                s.push(Integer.parseInt(e));
            }else{
                int right = s.pop();
                int left = s.pop();
                
                int put = 0;
                
                if(e.equals("+")) put = left + right;
                else if(e.equals("-")) put = left - right;
                else if(e.equals("*")) put = left * right;
                else if(e.equals("/")) put = left / right;
                
                s.push(put);
            }  
        }
        
        return s.peek();
    }
}

Simple stack problem 
Time Complexity: O(n)
