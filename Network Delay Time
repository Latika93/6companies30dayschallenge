743. Network Delay Time


class Pair{
    int first;
    int second;
    public Pair(int first, int second){
        this.first = first;
        this.second = second;
    }
}
class Cmp implements Comparator<Pair>{
    public int compare(Pair s1, Pair s2) {
        if(s1.second < s2.second) return -1;
        else if(s1.second > s2.second) return 1;
        return 0;
    } 
}

class Solution {

    public int networkDelayTime(int[][] times, int n, int k) {

        k-=1;
        ArrayList<ArrayList<Pair>> g = new ArrayList<>();

        for(int i = 0; i<n; i++){
            g.add(new ArrayList<>());
        }

        for(int i = 0; i<times.length; i++){
            g.get(times[i][0]-1).add(new Pair(times[i][1]-1, times[i][2]));
        }

        int level = 0;

        Set<Integer> vis = new HashSet<>();
        PriorityQueue<Pair> q = new PriorityQueue<>(new Cmp());

        q.add(new Pair(k, 0));

        while(!q.isEmpty()){
            Pair cur = q.poll();

            if(vis.contains(cur.first)) continue;
            vis.add(cur.first);
            level = Math.max(level, cur.second);

            for(Pair e: g.get(cur.first)){
                if(!vis.contains(e.first)){
                    q.add(new Pair(e.first, e.second + cur.second));
                }
            }
        }

        return (vis.size() == n) ? level : -1;
    }
}
