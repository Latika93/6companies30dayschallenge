2426. Number of Pairs Satisfying Inequality

Approach: Using MergeSort technique
Pretty Similar to Reverse Pair Problem

class Solution {

    long cnt = 0;

    public long numberOfPairs(int[] nums1, int[] nums2, int diff) {
        int n = nums1.length;
        long nums[] = new long[n];

        long temp[] = new long[n];
        for(int i = 0; i<n; i++){
            nums[i] = nums1[i] - nums2[i];
            temp[i] = nums1[i] - nums2[i];
        }
        mergesort(nums, temp, 0, n-1, diff);
        return cnt;
    }

    void mergesort(long nums[], long tmp[], int start, int end, int diff){
        if(start == end) return;

        int mid = start + (end-start)/2;

        mergesort(nums, tmp, start, mid, diff);
        mergesort(nums, tmp, mid+1, end, diff);
        merge(nums, tmp, start, mid, end, diff);
    }

    void merge(long nums[], long tmp[], int start, int mid, int end, int diff){
        
        for(int i = start, j = mid+1; i<= mid && j<=end; i++){
            while(j<=end && nums[i]>nums[j]+diff) j++;
            cnt += end-j+1;
        }

        for(int i = start, j = mid+1, k = start; i<= mid || j<=end; k++){
            if(j>end || (i<=mid && nums[i]<nums[j])){
                tmp[k] = nums[i++];
            }else{
                tmp[k] = nums[j++];
            }
        }
        System.arraycopy(tmp, start, nums, start, end-start+1);

    }
}


-------------------Reverse Pair----------------
This is Reverse Pair
class Solution {

    int merge(int nums[], int low, int mid, int high){
        int j = mid+1;
        int cnt = 0;
        for(int i = low; i<=mid; i++){
            while(j<=high && nums[i]>(2*(long)nums[j])){
                j++;
            }
            cnt += (j - (mid+1));
        }

        //sorting
        List<Integer> temp = new ArrayList<>();
        int l = low, r = mid+1;
        while(l<mid+1 && r<=high){
            if(nums[l]<=nums[r]){
                temp.add(nums[l++]);
            }else{
                temp.add(nums[r++]);
            }
        }

        while(l<mid+1) temp.add(nums[l++]);
        while(r<=high) temp.add(nums[r++]);

        for(int i = low; i<=high; i++){
            nums[i] = temp.get(i-low);
        }

        return cnt;
    }

    int mergeSort(int nums[], int low, int high){
        int cnt = 0;
        if(low<high){
            int mid = (low+high)/2;
            cnt += mergeSort(nums, low, mid);
            cnt += mergeSort(nums, mid+1, high);
            cnt += merge(nums, low, mid, high);
        }
        return cnt;
    }

    public int reversePairs(int[] nums) {
        return mergeSort(nums, 0, nums.length-1);
    }
}
